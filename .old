proc doLex() =
  type EE = object
    LET: string
    REF: string
    LIST_BEGIN: char
    LIST_END: char
    STRING_BEGIN: char
    STRING_END: char
    EQUALS: char
    CONCAT: char
    NEWLINE: char

  const kat = EE(
    LET: "let",
    REF: "ref",
    LIST_BEGIN: '[',
    LIST_END: ']',
    STRING_BEGIN: '"',
    STRING_END: '"',
    EQUALS: '=',
    CONCAT: '&',
    NEWLINE: '\n'
  )

  type Mode = object
    NORMAL: string
    SCAN_VAR: string
    SCAN_VAR_VALUE: string
    ARRAY_ITEM: string
    SCAN_STRING: string

  const mode = Mode(
    NORMAL: "normal",
    SCAN_VAR: "scan_variable",
    SCAN_VAR_VALUE: "scan_variable_value",
    ARRAY_ITEM: "array_item",
    SCAN_STRING: "scan_string"
  )

  # var vars = []
  # var arr = []
  var currentValue = ""

  var currentMode = mode.NORMAL
  var leadStart = 0
  let file = readFile("dotty.conf")
  for i, ch in file:
    let currentWord = file[leadStart .. i]

    case currentMode:
      of mode.NORMAL:
        case currentWord:
          of kat.LET:
            echo "FOUND LET"
            currentMode = mode.SCAN_VAR
            leadStart = i + 1
          of kat.LIST_BEGIN:
            echo "START LIST"
            currentMode = mode.ARRAY_ITEM
            leadStart = i + 1
      of mode.SCAN_VAR:
        if ch == kat.EQUALS:
          echo "VAR: " & currentWord[0..^2]
          currentValue = currentWord[0..^2]
          currentMode = mode.SCAN_VAR_VALUE
          leadStart = i + 1
      of mode.SCAN_VAR_VALUE:
        if ch == kat.NEWLINE:
          echo "VARVALUE: " & currentValue & "|" & currentWord
          currentMode = mode.NORMAL
          leadStart = i + 1
      # of mode.ARRAY_ITEM:
        # if ch == kat.STRING_BEGIN:
        #   currentMode = mode.SCAN_STRING
